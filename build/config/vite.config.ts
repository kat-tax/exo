import {defineConfig} from 'vite';
import {VitePWA} from 'vite-plugin-pwa';
import {lingui} from '@lingui/vite-plugin';
import react from '@vitejs/plugin-react';
import paths from 'vite-tsconfig-paths';
import sonda from 'sonda/vite';
import cfg from 'config';

export default defineConfig(env => ({
  // Output Configuration
  build: {
    outDir: '../output/client/web',
    sourcemap: true,
    emptyOutDir: true,
    chunkSizeWarningLimit: 1500,
    rollupOptions: {
      output: {
        format: 'es',
        chunkFileNames: '[name]-[hash].js',
      },
      onwarn: (warning, warn) => {
        if (warning.code === 'EVAL') return;
        warn(warning);
      },
    },
  },
  // React Native Web Support
  resolve: {
    extensions: [
      '.web.tsx',
      '.web.ts',
      '.web.js',
      '.mjs',
      '.mts',
      '.ts',
      '.tsx',
      '.js',
      '.jsx',
      '.json',
    ],
    alias: {
      'react-native': 'react-native-web',
    },
  },
  plugins: [
    // Support TypeScript Base URL
    paths(),
    react({
      babel: {
        plugins: [
          '@lingui/babel-plugin-lingui-macro',
          'babel-plugin-react-compiler',
        ],
      },
    }),
    // Support Lingui Macros
    lingui(),
    // Generate Service Worker & PWA Assets
    VitePWA({
      registerType: 'prompt',
      strategies: 'generateSW',
      manifest: {
        name: cfg.APP_NAME,
        short_name: cfg.APP_DISPLAY_NAME,
        description: 'Generated by EXO',
        theme_color: '#000000',
      },
      workbox: {
        globPatterns: ["**/*.{js,css,html,svg,png,ico,wasm}"],
        cleanupOutdatedCaches: true,
        clientsClaim: true,
      },
      devOptions: {
        enabled: false,
      },
    }),
    // Config Placeholders in index.html
    {
      name: 'index-html-config',
      transformIndexHtml(html) {
        let out = html;
        for (const [key, value] of Object.entries(cfg)) {
          out = out.replace(new RegExp(`__${key}__`, 'g'), value as string);
        }
        return out;
      },
    },
    // Bundle File Inspector
    sonda({
      open: false,
      sources: true,
      filename: 'index.html',
      outputDir: '../output/inspect/web',
    }),
  ],
  // Exclude Packages with Workers
  optimizeDeps: {
    exclude: [
      '@sqlite.org/sqlite-wasm',
      '@evolu/react-web',
    ],
  },
  // Do not open preview in browser
  preview: {
    open: false,
  },
  // Common Environment Variables
  define: {
    __DEV__: JSON.stringify(env.mode === 'development'),
    process: {
      env: {
        NODE_ENV: JSON.stringify(env.mode),
      },
    },
  },
}));
